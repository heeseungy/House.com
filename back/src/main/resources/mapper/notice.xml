<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.homelearn.back.notice.NoticeMapper">
    <resultMap id="notice" type="com.homelearn.back.notice.entity.Notice">
        <result column="id" property="id"></result>
        <result column="title" property="title"></result>
        <result column="content" property="content"></result>
        <result column="view" property="viewCount"></result>
        <result column="created_at" property="creatTime"></result>
        <result column="user_id" property="writerId"></result>
    </resultMap>
    <resultMap id="noticeJoinMember" type="com.homelearn.back.notice.entity.NoticeJoinMember">
        <result column="notice_id" property="id"></result>
        <result column="notice_title" property="title"></result>
        <result column="notice_content" property="content"></result>
        <result column="notice_view_count" property="viewCount"></result>
        <result column="notice_created_at" property="creatTime"></result>
        <result column="notice_writer_id" property="writerId"></result>
        <result column="notice_writer_password" property="writerPassword"></result>
        <result column="notice_writer_email" property="writerEmail"></result>
        <result column="notice_writer_name" property="writerName"></result>
        <result column="notice_writer_role" property="writerRole"></result>
        <result column="notice_writer_provider" property="provider"></result>
    </resultMap>

    <insert id="addNotice" parameterType="AddNoticeInputSpec">
        insert into notices(title, content, user_id)
        values (#{title}, #{content}, ${writerId})
    </insert>

    <select id="getNoticeById" parameterType="Long" resultMap="noticeJoinMember">
        SELECT
            notices.id AS notice_id,
            notices.title AS notice_title,
            notices.content AS notice_content,
            notices.`view` AS notice_view_count,
            notices.created_at AS notice_created_at,
            notices.user_id AS notice_writer_id,
            users.`password` AS notice_writer_password,
            users.email AS notice_writer_email,
            users.`name` AS notice_writer_name,
            users.`role` AS notice_writer_role,
            users.`provider` AS notice_writer_provider
        FROM
            notices
        JOIN users ON notices.user_id = users.id
        where notices.id = #{noticeId}
    </select>


    <select id="getNoticeList" parameterType="FindListNoticeInputSpec" resultMap="notice">
        SELECT
            *
        FROM
        notices
        <where>
            <if test="searchText != null and searchText != ''">
                AND (title LIKE CONCAT('%', #{searchText}, '%')
                OR content LIKE CONCAT('%', #{searchText}, '%'))
            </if>
        </where>
        ORDER BY created_at desc
        LIMIT #{count} OFFSET #{startIndex}
    </select>

    <update id="editNotice" parameterType="NoticeParam">
        update notices set title = #{title}, content = #{content}
        where id=#{id}
    </update>

    <update id="countNotice" parameterType="Long">
        update notices set `view` = `view`+1 where id=#{noticeId}
    </update>

    <select id="getTotalCount" resultType="Integer">
        SELECT COUNT(*) FROM notices;
    </select>

    <delete id="deleteNoticeById" parameterType="Long">
        delete
        from notices
        where id=#{noticeId};
    </delete>

</mapper>